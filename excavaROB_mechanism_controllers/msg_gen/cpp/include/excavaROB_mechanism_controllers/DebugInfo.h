/* Auto-generated by genmsg_cpp for file /home/cmastalli/ros_workspace/excavabot/excavaROB_mechanism_controllers/msg/DebugInfo.msg */
#ifndef EXCAVAROB_MECHANISM_CONTROLLERS_MESSAGE_DEBUGINFO_H
#define EXCAVAROB_MECHANISM_CONTROLLERS_MESSAGE_DEBUGINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace excavaROB_mechanism_controllers
{
template <class ContainerAllocator>
struct DebugInfo_ {
  typedef DebugInfo_<ContainerAllocator> Type;

  DebugInfo_()
  : timing()
  , sequence(0)
  , input_valid(false)
  , residual(0.0)
  {
  }

  DebugInfo_(const ContainerAllocator& _alloc)
  : timing(_alloc)
  , sequence(0)
  , input_valid(false)
  , residual(0.0)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _timing_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  timing;

  typedef int32_t _sequence_type;
  int32_t sequence;

  typedef uint8_t _input_valid_type;
  uint8_t input_valid;

  typedef double _residual_type;
  double residual;


  typedef boost::shared_ptr< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DebugInfo
typedef  ::excavaROB_mechanism_controllers::DebugInfo_<std::allocator<void> > DebugInfo;

typedef boost::shared_ptr< ::excavaROB_mechanism_controllers::DebugInfo> DebugInfoPtr;
typedef boost::shared_ptr< ::excavaROB_mechanism_controllers::DebugInfo const> DebugInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace excavaROB_mechanism_controllers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6281356ce897e33da024b8eb319460f2";
  }

  static const char* value(const  ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6281356ce897e33dULL;
  static const uint64_t static_value2 = 0xa024b8eb319460f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "excavaROB_mechanism_controllers/DebugInfo";
  }

  static const char* value(const  ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] timing\n\
int32 sequence\n\
bool input_valid\n\
float64 residual\n\
";
  }

  static const char* value(const  ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timing);
    stream.next(m.sequence);
    stream.next(m.input_valid);
    stream.next(m.residual);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DebugInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::excavaROB_mechanism_controllers::DebugInfo_<ContainerAllocator> & v) 
  {
    s << indent << "timing[]" << std::endl;
    for (size_t i = 0; i < v.timing.size(); ++i)
    {
      s << indent << "  timing[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.timing[i]);
    }
    s << indent << "sequence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sequence);
    s << indent << "input_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.input_valid);
    s << indent << "residual: ";
    Printer<double>::stream(s, indent + "  ", v.residual);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EXCAVAROB_MECHANISM_CONTROLLERS_MESSAGE_DEBUGINFO_H

