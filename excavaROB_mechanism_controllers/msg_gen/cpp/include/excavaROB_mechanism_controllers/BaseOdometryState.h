/* Auto-generated by genmsg_cpp for file /home/cmastalli/ros_workspace/excavabot/excavaROB_mechanism_controllers/msg/BaseOdometryState.msg */
#ifndef EXCAVAROB_MECHANISM_CONTROLLERS_MESSAGE_BASEODOMETRYSTATE_H
#define EXCAVAROB_MECHANISM_CONTROLLERS_MESSAGE_BASEODOMETRYSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Twist.h"

namespace excavaROB_mechanism_controllers
{
template <class ContainerAllocator>
struct BaseOdometryState_ {
  typedef BaseOdometryState_<ContainerAllocator> Type;

  BaseOdometryState_()
  : velocity()
  , right_wheel_link_names()
  , left_wheel_link_names()
  {
  }

  BaseOdometryState_(const ContainerAllocator& _alloc)
  : velocity(_alloc)
  , right_wheel_link_names(_alloc)
  , left_wheel_link_names(_alloc)
  {
  }

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  velocity;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _right_wheel_link_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  right_wheel_link_names;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _left_wheel_link_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  left_wheel_link_names;


  typedef boost::shared_ptr< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BaseOdometryState
typedef  ::excavaROB_mechanism_controllers::BaseOdometryState_<std::allocator<void> > BaseOdometryState;

typedef boost::shared_ptr< ::excavaROB_mechanism_controllers::BaseOdometryState> BaseOdometryStatePtr;
typedef boost::shared_ptr< ::excavaROB_mechanism_controllers::BaseOdometryState const> BaseOdometryStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace excavaROB_mechanism_controllers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c0c3716bf92e25147d70d33666638b37";
  }

  static const char* value(const  ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc0c3716bf92e2514ULL;
  static const uint64_t static_value2 = 0x7d70d33666638b37ULL;
};

template<class ContainerAllocator>
struct DataType< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "excavaROB_mechanism_controllers/BaseOdometryState";
  }

  static const char* value(const  ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Twist velocity\n\
string[] right_wheel_link_names\n\
string[] left_wheel_link_names\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.velocity);
    stream.next(m.right_wheel_link_names);
    stream.next(m.left_wheel_link_names);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BaseOdometryState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::excavaROB_mechanism_controllers::BaseOdometryState_<ContainerAllocator> & v) 
  {
    s << indent << "velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "right_wheel_link_names[]" << std::endl;
    for (size_t i = 0; i < v.right_wheel_link_names.size(); ++i)
    {
      s << indent << "  right_wheel_link_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.right_wheel_link_names[i]);
    }
    s << indent << "left_wheel_link_names[]" << std::endl;
    for (size_t i = 0; i < v.left_wheel_link_names.size(); ++i)
    {
      s << indent << "  left_wheel_link_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.left_wheel_link_names[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // EXCAVAROB_MECHANISM_CONTROLLERS_MESSAGE_BASEODOMETRYSTATE_H

